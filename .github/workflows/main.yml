# .github/workflows/release.yml

name: Create Release and Upload Firmware

on:
  push:
    tags:
      - 'v*' # 匹配 v1.0, v2.3.4 等标签

jobs:
  build-and-release:
    name: Build and Create Release
    runs-on: ubuntu-latest
    
    # ==================== 核心修改点 1 ====================
    # 明确为这个任务授予写权限，以允许创建 Release
    permissions:
      contents: write
    # ======================================================

    steps:
      # 第一步：检出代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # 第二步：构建项目
      - name: Build ESP-IDF project
        id: build-project
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: 'v5.4.2'
          target: 'esp32c3' # 请确认这是您想要的目标芯片
          path: '.'

      # 第三步：将固件打包成 ZIP 文件
      - name: Package firmware with Python
        id: package-firmware
        run: |
          python scripts/package_firmware.py \
            --build-dir build \
            --output-dir firmware_package \
            --ref-name "${{ github.ref_name }}" \
            --target "${{ steps.build-project.outputs.target }}"

      # 第四步：根据标签创建 GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # ==================== 核心修改点 2 ====================
          # 使用 github.ref_name 来获取干净的标签名，而不是 refs/tags/v1.0.1
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          # ======================================================
          body: |
            自动构建的发布版本 ${{ github.ref_name }}
          draft: false
          prerelease: false

      # 第五步：上传打包好的 ZIP 文件到 Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # 使用 package-firmware 步骤的输出作为 asset_path
          asset_path: ./${{ steps.package-firmware.outputs.zip_filename }}
          # 同样，使用输出作为 asset_name
          asset_name: ${{ steps.package-firmware.outputs.zip_filename }}
          asset_content_type: application/zip
